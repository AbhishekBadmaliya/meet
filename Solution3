"use client";
import {
  Home,
  Inbox,
  SquarePen,
  FileText,
  CheckCircle,
  Building2,
  RefreshCcw,
  PanelLeft,
} from "lucide-react";
import {
  List,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Typography,
  useMediaQuery,
  IconButton,
  Box,
  Drawer,
} from "@mui/material";
import { useTheme } from "@mui/material/styles";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useEffect, useState, useCallback } from "react";

type MenuItem = {
  title: string;
  icon: any;
  href: string;
  activePatterns?: string[];
};

export function SideBar({
  role,
  initialCollapsed = false,
  children,
}: {
  role: string;
  initialCollapsed?: boolean;
  children?: React.ReactNode;
}) {
  const pathname = usePathname();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const [open, setOpen] = useState(!initialCollapsed);

  const sidebarWidth = 240;
  const collapsedWidth = 56;
  const navHeight = 64;

  const toggleSidebar = () => setOpen((prev) => !prev);
  const closeSidebar = () => setOpen(false);

  useEffect(() => {
    setOpen(!isMobile && !initialCollapsed);
  }, [isMobile, initialCollapsed]);

  const handleMenuItemClick = useCallback(() => {
    if (isMobile) closeSidebar();
  }, [isMobile]);

  const menuItemsByRole: Record<string, MenuItem[]> = {
    Applicant: [
      { title: "New Application", icon: Home, href: "/applicant", activePatterns: ["/applicant/form"] },
      { title: "Renew Application", icon: RefreshCcw, href: "/applicant/renew-application" },
      { title: "Draft Applications", icon: SquarePen, href: "/applicant/draft-applications" },
      { title: "Application Status", icon: CheckCircle, href: "/applicant/application-status" },
    ],
    "Drugs-Inspector": [
      { title: "New Applications", icon: FileText, href: "/drugs-inspector", activePatterns: ["/drugs-inspector/view-form"] },
      { title: "Renewal Applications", icon: RefreshCcw, href: "/drugs-inspector/renewal-applications" },
    ],
    "State-Licensing-Authority": [
      { title: "New Applications", icon: FileText, href: "/state-licensing-authority", activePatterns: ["/state-licensing-authority/view-form"] },
      { title: "Renewal Applications", icon: RefreshCcw, href: "/state-licensing-authority/renewal-applications" },
      { title: "Users", icon: Inbox, href: "/state-licensing-authority/users" },
      { title: "Head Quarter", icon: Building2, href: "/state-licensing-authority/head-quarter" },
    ],
  };

  const items = menuItemsByRole[role] || [];

  const isMenuItemActive = (item: MenuItem): boolean => {
    if (pathname === item.href) return true;
    if (pathname.startsWith(item.href + "/") && !hasMoreSpecificMatch(item.href, items)) return true;
    return item.activePatterns?.some((pattern) => pathname.startsWith(pattern)) ?? false;
  };

  const hasMoreSpecificMatch = (basePath: string, items: MenuItem[]): boolean => {
    return items.some(
      (otherItem) =>
        otherItem.href !== basePath &&
        otherItem.href.startsWith(basePath + "/") &&
        pathname.startsWith(otherItem.href)
    );
  };

  const SidebarContent = (
    <Box
      sx={{
        width: open ? sidebarWidth : collapsedWidth,
        height: "100%",
        backgroundColor: "#fff",
        boxShadow: "2px 0 8px rgba(0,0,0,0.1)",
        overflowX: "hidden",
        transition: "width 0.2s ease-in-out",
      }}
    >
      <Box
        sx={{
          height: navHeight,
          display: "flex",
          alignItems: "center",
          justifyContent: open ? "space-between" : "center",
          px: 1,
          borderBottom: "1px solid rgba(0, 0, 0, 0.12)",
        }}
      >
        {open && (
          <Typography variant="h6" sx={{ ml: 2, fontWeight: 500, color: "#1976d2" }}>
            {role}
          </Typography>
        )}
        <IconButton onClick={toggleSidebar} sx={{ color: "#1976d2" }}>
          <PanelLeft />
        </IconButton>
      </Box>

      <List sx={{ pt: 1 }}>
        {items.map((item) => {
          const Icon = item.icon;
          const isActive = isMenuItemActive(item);
          return (
            <Link key={item.title} href={item.href} passHref>
              <ListItemButton
                component="a"
                onClick={handleMenuItemClick}
                selected={isActive}
                sx={{
                  py: 1.5,
                  justifyContent: open ? "initial" : "center",
                  "&.Mui-selected": {
                    backgroundColor: "rgba(25, 118, 210, 0.08)",
                    "&:hover": { backgroundColor: "rgba(25, 118, 210, 0.12)" },
                  },
                  "&:hover": { backgroundColor: "rgba(0, 0, 0, 0.04)" },
                }}
              >
                <ListItemIcon
                  sx={{
                    minWidth: open ? 56 : 0,
                    color: isActive ? "#1976d2" : "rgba(0, 0, 0, 0.54)",
                  }}
                >
                  <Icon />
                </ListItemIcon>
                {open && (
                  <ListItemText
                    primary={item.title}
                    primaryTypographyProps={{
                      variant: "body2",
                      fontWeight: isActive ? 600 : 400,
                      color: isActive ? "#1976d2" : "rgba(0, 0, 0, 0.87)",
                    }}
                  />
                )}
              </ListItemButton>
            </Link>
          );
        })}
      </List>
    </Box>
  );

  return (
    <Box sx={{ display: "flex", minHeight: "100vh" }}>
      {/* Drawer for Mobile */}
      {isMobile ? (
        <Drawer open={open} onClose={closeSidebar}>
          {SidebarContent}
        </Drawer>
      ) : (
        SidebarContent
      )}

      {/* Main Content */}
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          marginLeft: isMobile ? 0 : open ? `${sidebarWidth}px` : `${collapsedWidth}px`,
          transition: "margin-left 0.2s ease-in-out",
          pt: `${navHeight}px`,
          backgroundColor: "#fafafa",
          minHeight: "100vh",
          position: "relative",
        }}
      >
        {/* Mobile Icon - Top Left on Content Page */}
        {isMobile && !open && (
          <Box
            sx={{
              position: "absolute",
              top: 16,
              left: 16,
              zIndex: 1400,
            }}
          >
            <IconButton
              onClick={toggleSidebar}
              sx={{
                backgroundColor: "#fff",
                boxShadow: "0px 2px 4px rgba(0,0,0,0.1)",
                "&:hover": { backgroundColor: "#f5f5f5" },
              }}
            >
              <PanelLeft />
            </IconButton>
          </Box>
        )}

        {/* Actual page content */}
        {children}
      </Box>
    </Box>
  );
}
